/* CTF 1.8 */

trace {
	major = 1;
	minor = 8;
	uuid = "c4e90e9b-4537-4f3b-90d9-ec331dcda678";
	byte_order = le;
	packet.header := struct {
		integer { size = 32; align = 8; signed = false; encoding = none; base = decimal; byte_order = le; } magic;
		integer { size = 8; align = 8; signed = false; encoding = none; base = decimal; byte_order = le; } uuid[16];
		integer { size = 32; align = 8; signed = false; encoding = none; base = decimal; byte_order = le; } stream_id;
	} align(8);
};

env {
	domain = "kernel";
};

clock {
	name = my_clock;
	uuid = "143a6588-7ce7-41ed-929e-2baa33ef6527";
	description = "my clock";
	freq = 1000000000;
	precision = 1;
	offset_s = 0;
	offset = 0;
	absolute = FALSE;
};

stream {
	id = 0;
	event.header := struct {
		integer { size = 32; align = 8; signed = false; encoding = none; base = decimal; byte_order = le; } id;
		integer { size = 64; align = 8; signed = false; encoding = none; base = decimal; byte_order = le; map = clock.my_clock.value; } timestamp;
	} align(8);

	packet.context := struct {
		integer { size = 64; align = 8; signed = false; encoding = none; base = decimal; byte_order = le; } timestamp_begin;
		integer { size = 64; align = 8; signed = false; encoding = none; base = decimal; byte_order = le; } timestamp_end;
		integer { size = 64; align = 8; signed = false; encoding = none; base = decimal; byte_order = le; } content_size;
		integer { size = 64; align = 8; signed = false; encoding = none; base = decimal; byte_order = le; } packet_size;
		integer { size = 64; align = 8; signed = false; encoding = none; base = decimal; byte_order = le; } events_discarded;
	} align(8);
};

event {
	id = 0;
	name = "sched_process_fork";
	stream_id = 0;
	fields := struct {
		integer { size = 64; align = 1; signed = true; encoding = none; base = decimal; byte_order = le; } parent_tid;
		integer { size = 64; align = 1; signed = true; encoding = none; base = decimal; byte_order = le; } parent_pid;
		integer { size = 64; align = 1; signed = true; encoding = none; base = decimal; byte_order = le; } child_pid;
		integer { size = 64; align = 1; signed = true; encoding = none; base = decimal; byte_order = le; } child_tid;
		string { encoding = UTF8; } parent_comm;
		string { encoding = UTF8; } child_comm;
	} align(8);
};

