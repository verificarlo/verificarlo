/* CTF 1.8 */

trace {
	major = 1;
	minor = 8;
	uuid = "9eb01364-89b2-483f-ae88-38e1ae5e4f81";
	byte_order = le;
	packet.header := struct {
		integer { size = 32; align = 8; signed = false; encoding = none; base = decimal; byte_order = le; } magic;
		integer { size = 8; align = 8; signed = false; encoding = none; base = decimal; byte_order = le; } uuid[16];
		integer { size = 32; align = 8; signed = false; encoding = none; base = decimal; byte_order = le; } stream_id;
	} align(8);
};

env {
	domain = "veritrace";
};

clock {
	name = my_clock;
	uuid = "82c5d119-5a69-4d4e-b16f-f44081ba5fb7";
	description = "my clock";
	freq = 1000000000;
	precision = 1;
	offset_s = 0;
	offset = 0;
	absolute = FALSE;
};

stream {
	id = 0;
	event.header := struct {
		integer { size = 32; align = 8; signed = false; encoding = none; base = decimal; byte_order = le; } id;
		integer { size = 64; align = 8; signed = false; encoding = none; base = decimal; byte_order = le; map = clock.my_clock.value; } timestamp;
	} align(8);

	packet.context := struct {
		integer { size = 64; align = 8; signed = false; encoding = none; base = decimal; byte_order = le; } timestamp_begin;
		integer { size = 64; align = 8; signed = false; encoding = none; base = decimal; byte_order = le; } timestamp_end;
		integer { size = 64; align = 8; signed = false; encoding = none; base = decimal; byte_order = le; } content_size;
		integer { size = 64; align = 8; signed = false; encoding = none; base = decimal; byte_order = le; } packet_size;
		integer { size = 64; align = 8; signed = false; encoding = none; base = decimal; byte_order = le; } events_discarded;
	} align(8);
};

event {
	id = 0;
	name = "callpath";
	stream_id = 0;
	fields := struct {
		integer { size = 64; align = 1; signed = false; encoding = none; base = decimal; byte_order = le; } parent;
		integer { size = 64; align = 1; signed = false; encoding = none; base = decimal; byte_order = le; } id;
		string { encoding = UTF8; } name;
	} align(8);
};

event {
	id = 1;
	name = "context";
	stream_id = 0;
	fields := struct {
		integer { size = 64; align = 1; signed = false; encoding = none; base = decimal; byte_order = le; } id;
		string { encoding = UTF8; } file;
		string { encoding = UTF8; } name;
		string { encoding = UTF8; } function;
		integer { size = 32; align = 1; signed = true; encoding = none; base = decimal; byte_order = le; } line;
		string { encoding = UTF8; } type;
	} align(8);
};

event {
	id = 2;
	name = "value";
	stream_id = 0;
	fields := struct {
		integer { size = 64; align = 1; signed = false; encoding = none; base = decimal; byte_order = le; } context;
		integer { size = 64; align = 1; signed = false; encoding = none; base = decimal; byte_order = le; } parent;
		floating_point { exp_dig = 11; mant_dig = 53; byte_order = le; align = 1; } mean;
		floating_point { exp_dig = 11; mant_dig = 53; byte_order = le; align = 1; } max;
		floating_point { exp_dig = 11; mant_dig = 53; byte_order = le; align = 1; } min;
		floating_point { exp_dig = 11; mant_dig = 53; byte_order = le; align = 1; } std;
		floating_point { exp_dig = 11; mant_dig = 53; byte_order = le; align = 1; } median;
		floating_point { exp_dig = 11; mant_dig = 53; byte_order = le; align = 1; } significant_digits;
	} align(1);
};

