Verificarlo CHANGELOG

# [Unreleased]

## Added
  * Mechanism for reading VFC_BACKENDS from file through VFC_BACKENDS_FROM_FILE
  * Absolute error option for MCA and VPREC backends

# [v0.4.1] 2020/10/22

## Added
  * Add support for function instrumentation. Through a new compiler pass, backends can operate at the function granularity. Function instrumentation provides call site and call stack information and allows to instrument the scalar inputs and output of functions.
  * VPREC backend takes advantage of function instrumentation to enable per function and per (scalar) argument exploration of variable precision
  * Add compiler options support (-E, -S, --save-temps) and remove intermediate .ll files
  * Support assembly (.S) files (which are not instrumented)
  * Improved support for include/exclude mechanism. In particular now, regexps are supported
  * Delta-debug supports exclude files
  * Increase the size of supported vectors from 4 to 16

## Fixed
  * Fix multiple corner-cases in the VPREC backend. In particular, handling of denormals has been fixed and new tests added.
  * Fix configure.ac GCC version on some linux distributions
  * Fix bugs in include/exclude mechanisms
  * Fix bug with absolute paths for .ll paths

# [v0.4.0] 2020/07/03

## Added
  * Support for LLVM up to 10.0.1
  * Add flang support for Fortran
  * Add test_fortran_NAS that compiles and run the CG test from the NAS Parallel Benchmarks
  * Add test_cpp for testing the compilation of C++ files
  * Add wrappers for each target language: verificarlo-c, verificarlo-f and verificarlo-c++
  * Add the option --linker to verificarlo to choose which linker to use
  * Add the option --show-cmd in verificarlo to print internal commands
  * Add clang-format-lint in the CI pipeline to check the clang-format conformity of source files
  * Add VPREC backend that allows simulating any floating-point formats that fit into the IEEE-754 double precision format

## Changed
  * Update configure.ac to check gcc and llvm version
  * Update m4/ax_llvm.m4 to remove the dragonegg option
  * Update test_vprec_backend to reduce its execution time

## Fixed
  * Fix test_branch_instrumentation to force FP constants to be actual float
  * Fix test_kahan that does not correctly output files
  * Fix wrong max range for binary32 type
  * Fix typo in exclusion/inclusion rules

## Removed
  * Support for LLVM 3.3 to 3.9
  * Support for gcc version older than 4.9
  * Support for dragonegg+gcc

# [v0.3.0] 2020/04/02

## Added
   * Support for LLVM up to 9.0.1
   * Add delta-debug to Verificarlo to pinpoint numerical bugs
   * Add a newer backend to detect and measure the impact of cancellations
   * Add bitmask backend (libinterflop_bitmask.so), a fast first order model of noise
   * Add DAZ/FTZ options for flushing subnormal numbers to 0
       - --daz: denormals-are-zero, flushes subnormal inputs to 0
       - --ftz: flush-to-zero, flushes subnormal output to 0
   * Add options for interflop_ieee backend
       - --debug-binary: enable binary debug output
       - --no-backend-name: do not print backend name in debug output
       - --print-new-line: add a new line after debug output
       - --print-subnormal-normalized: print subnormal number in the normalized form
   * Separate virtual precisions for binary32 and binary64 values
   * Add an option for selecting the seed of the RNG
   * Add VFC_BACKENDS_SILENT_LOAD environment variable for disabling messages when a backend is loaded
   * Add VFC_BACKEND_LOGGER environment variable for enabling/disabling the logger
   * Add VFC_BACKEND_COLORED_LOGGER environment variable for enabling/disabling the colored messages

## Changed
   * Update configure.ac for checking special types and features
   * Optimize and factorize interlop_mca_mpfr and interflop_mca backends
   * Upgrade python scripts to Python3
   * Backends mca and mca-mpfr are bitwise comparable

## Fixed
   * Fix issues in interflop_ieee backend
   * Fix multiple vfc_init calls
   * Use quote around PWD to support paths with spaces
   * Fix bug in interflop_mca backend
   * Fix GPG key error in .travis.yml
   * Fix issue with the verbose mode
   * Fix LIBS dependencies in configure.ac
   * Fix bug in libVFCInstrument which sometimes leads to not properly instrumented operations
   * Check that at least one loaded backend provides operations

[v0.2.3] 2019/08/19

## Added
   * Use Interflop interface which suport loading backends as dynamic plugins
   * Backend interflop_ieee which uses standard IEEE 754 arithmetic
   * Backend are loadead with the VFC_BACKENDS environment variable
   * Options for backends are passed with VFC_BACKENDS="/path/to/interflop_backend.so --option1 --option2 ..."

## Fixed
   * Correctly detect non supported fp types
   * Fix handling of boolean vectors
   * Fix memory leak in quad backend

## Removed
   * Environment variables VERIFICARLO_BACKENDS, VERIFICARLO_PRECISION and VERIFICARLO_MCAMODE

# [v0.2.2] 2019/08/07
    * Unstable branch detection with gcov
    * Branch instrumentation of FCMP instructions
    * Fixed linking of shared libraries
    * Fixed shell expansion in optional arguments
    * Fix bug with configure LLVM flags in m4/ax_llvm
    * Improved support for complex inclusion/exclusion schemes
    * Add new tests

# [v0.2.1] 2018/11/22
    * Support for LLVM up to 4.0.1
    * Command line option to instrument a list of functions
    * Multiple bug fixes in the backends
    * Fix for Boost codes; verificarlo is initialized before C++ constructors
    * Fix bug in vfcInstrumenter for parentless instructions
    * In RR mode exact operations are preserved
    * Add Kahan 2x2 test
    * Add RR exact operations tests

# [v0.2.0] 2016/12/09
    * Support for LLVM up to 3.8
    * Support for standalone installation with make install
    * Experimental VTK post-processing
    * Fix bug with unsupported fortran extensions

# [v0.1.0] 2016/01/06
    * QUAD backend performance has been thoroughly optimized
    * QUAD backend now computes MCA operations on float using doubles
    * Added tests to compare QUAD and MPFR backends

# [v0.0.2] 2015/12/29
    * Support for multiple MCA backends. LLVM instrumentations goes
      through a backend vtable.
    * New faster QUAD backend, MCA operations on doubles are computed
      using GCC __float128 type.
    * vfcwrapper public API has changed

# [v0.0.1] 2015/10/22
    * Initial Verificarlo release
    * This is the version used in the experiments discussed in
      https://hal.archives-ouvertes.fr/hal-01192668
