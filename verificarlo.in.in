#!/usr/bin/python
#*******************************************************************************
#                                                                              *
#  This file is part of Verificarlo.                                           *
#                                                                              *
#  Copyright (c) 2015-2016                                                     *
#     Universite de Versailles St-Quentin-en-Yvelines                          *
#     CMLA, Ecole Normale Superieure de Cachan                                 *
#                                                                              *
#  Verificarlo is free software: you can redistribute it and/or modify         *
#  it under the terms of the GNU General Public License as published by        *
#  the Free Software Foundation, either version 3 of the License, or           *
#  (at your option) any later version.                                         *
#                                                                              *
#  Verificarlo is distributed in the hope that it will be useful,              *
#  but WITHOUT ANY WARRANTY; without even the implied warranty of              *
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the               *
#  GNU General Public License for more details.                                *
#                                                                              *
#  You should have received a copy of the GNU General Public License           *
#  along with Verificarlo.  If not, see <http://www.gnu.org/licenses/>.        *
#                                                                              *
#*******************************************************************************

from __future__ import print_function

import argparse
import os
import sys
import subprocess
import tempfile

PACKAGE_STRING = "@PACKAGE_STRING@"
LIBDIR = "%LIBDIR%"
PROJECT_ROOT = os.path.dirname(os.path.realpath(__file__))
libvfcinstrument = LIBDIR + '/libvfcinstrument.so'
libvfcreport = LIBDIR + '/libvfcreport.so'
libvfctracer = LIBDIR + '/libvfctracer.so'
libvfctracer_probe = LIBDIR + '/libvfctracer_probe.so'
mcalib_static = "{0}/libmcampfr.a {0}/libmcaquad.a {0}/libbitmask.a".format(LIBDIR)
mcalib_dynamic = "-lmcampfr -lmcaquad -lbitmask"
mcalib_options = "-rpath {0} -L {0}".format(LIBDIR)
mcalib_includes = PROJECT_ROOT + "/../include/"
vfcwrapper = mcalib_includes + 'vfcwrapper.c'
llvm_bindir = "@LLVM_BINDIR@"
clang = '@CLANG_PATH@'
opt = llvm_bindir + '/opt'
dragonegg = "@DRAGONEGG_PATH@"
gcc = "@GCC_PATH@"
FORTRAN_EXTENSIONS=[".f", ".f90", ".f77"]
C_EXTENSIONS=[".c", ".cpp", ".cc", ".cxx"]
report_level_choices=["module", "function", "basicblock"]
VERIFICARLO_REPORT_PATH_ENV = 'VERIFICARLO_REPORT_PATH'
verificarlo_report_filename = "verificarlo_report.csv"
verificarlo_report_path = ""
VERITRACER_LOCINFO_PATH_ENV = 'VERITRACER_LOCINFO_PATH'
veritracer_locinfo_filename = "locationInfo.map" 
veritracer_locinfo_path = ""
tracer_format_choices = ['text','binary']
tracer_level_choices = ['basic', 'temporary']

class NoPrefixParser(argparse.ArgumentParser):
    # ignore prefix autocompletion of options
    def _get_option_tuples(self, option_string):
        return []

def fail(msg):
    print(sys.argv[0] + ': ' + msg, file=sys.stderr)
    sys.exit(1)

def is_fortran(name):
    return os.path.splitext(name)[1].lower() in FORTRAN_EXTENSIONS

def is_c(name):
    return os.path.splitext(name)[1].lower() in C_EXTENSIONS

def parse_extra_args(args):
    sources = []
    options = []

    for a in args:
        if is_fortran(a):
	    if not dragonegg:
		fail("fortran not supported. "
		     + "--without-fortran was used during configuration.")
	    sources.append(a)
	elif is_c(a):
            sources.append(a)
        else:
            options.append(a)

    return sources, ' '.join(options)

def fail(msg):
    print(sys.argv[0] + ': ' + msg, file=sys.stderr)
    sys.exit(1)

def shell(cmd):
    try:
        subprocess.check_call(cmd, shell=True)
    except subprocess.CalledProcessError:
        fail('command failed:\n' + cmd)

def add_header_verificarlo_report(report_level, print_percentage):
    verificarlo_report_path = os.getenv(VERIFICARLO_REPORT_PATH_ENV)+"/"+verificarlo_report_filename
    if os.path.isfile(verificarlo_report_path):
        return

    vr_file = open(verificarlo_report_path, "w")
    header = ""
    if (report_level == "module"):
        header = "Module"
    elif (report_level == "function"):
        header = "Module,Function"
    elif (report_level == "basicblock"):
        header = "Module,Function,BasicBlock"
    header += ",#FOPS"

    if print_percentage:
        header += ",add,sub,mul,div"

    vr_file.write(header+"\n")

def linker_mode(sources, options, output, args):
    shell('{clang} -c -O2 -static -o .vfcwrapper.o {vfcwrapper} -I {mcalib_includes}'.format(
        clang=clang,
        vfcwrapper=vfcwrapper,
        mcalib_includes=mcalib_includes))

    # Only include lgfortran if fortran support is enabled
    gfortran = "-lgfortran" if dragonegg else ""

    f=tempfile.NamedTemporaryFile()
    if args.static:
        f.write('{output} {sources} {options} -static .vfcwrapper.o {mcalib_static} -lmpfr -lgmp {gfortran} -lm'.format(
            output=output,
            sources=' '.join([os.path.splitext(s)[0]+'.o' for s in sources]),
            options=options,
            mcalib_static=mcalib_static,
            gfortran=gfortran))
       
    else:
        f.write('{output} {sources} {options} .vfcwrapper.o {mcalib_options} {mcalib_dynamic} {gfortran}'.format(
            output=output,
            sources=' '.join([os.path.splitext(s)[0]+'.o' for s in sources]),
            options=options,
            mcalib_options=mcalib_options,
            mcalib_dynamic=mcalib_dynamic,
            gfortran=gfortran))

    f.flush()
    shell('{clang} @{temp}'.format(clang=clang, temp=f.name))
    f.close()

def compiler_mode(sources, options, output, args):
    for source in sources:
        basename = os.path.splitext(source)[0]
        ir = basename + '.1.ll'
        ins_tracer_probe = basename + '.2.ll'
        ins_tracer = basename + '.3.ll'
        ins_mca = basename + '.4.ll'

        # Compile to ir (fortran uses gcc+dragonegg, c uses clang)
        if is_fortran(source):
            shell('{gcc} -c -S {source} {options} -fplugin={dragonegg} -fplugin-arg-dragonegg-emit-ir -o {ir}'.format(
                gcc=gcc,
                source=source,
                options=options,
                dragonegg=dragonegg,
                ir=ir))
        else:
            shell('{clang} -c -S {source} -emit-llvm {options} -o {ir}'.format(
                clang=clang,
                source=source,
                options=options,
                ir=ir
            ))

        selectfunction = ""
        if args.function:
            selectfunction = "-vfclibinst-function=" + args.function
        elif args.functions_file:
            selectfunction = "-vfclibinst-function-file=" + args.functions_file

        # Activate verbose mode
        verbose = ""
        if args.verbose:
            verbose = "-vfclibinst-verbose "

        # Activate black list mode
        blacklist = ""
        if args.black_list_mode:
            blacklist = "-vfclibblack-list "
        
        # Activate report mode
        if args.report_level:
            report = "-vfclibreport-level=" + str(args.report_level)
            print_percentage = "-vfclibreport-percentage" if args.print_percentage else ""
            shell('{opt} -f -load {libvfcreport} -vfclibreport {report} {print_percentage} {ir} > /dev/null'.format(
                opt=opt,
                libvfcreport=libvfcreport,
                report=report,
                ir=ir,
                print_percentage=print_percentage
            ))
            
        # Apply Veritracer instrumentation pass
        if args.tracer:
            tracer_format = '-vfclibtracer-format=' + args.tracer_format
            tracer_bt = '-vfclibtracer-backtrace' if args.tracer_backtrace else ''
            tracer_debug_mode = '-vfclibtracer-debug' if args.tracer_debug_mode else ''
            tracer_level = '-vfclibtracer-level=' + args.tracer_level
            # Apply tracer probes intrusmentation pass
            shell('{opt} -S -load {libvfctracer_probe} -vfclibtracer-probe {tracer_format} {tracer_bt}  {tracer_debug_mode} {verbose} {ir} -o {ins}'.format(
                opt=opt,
                libvfctracer_probe=libvfctracer_probe,
                tracer_format=tracer_format,
                tracer_bt=tracer_bt,
                tracer_debug_mode=tracer_debug_mode,
                verbose=verbose,
                ir=ir,
                ins=ins_tracer_probe,                
            ))

            ir = ins_tracer_probe          

            # Apply tracer instrumentation pass
            shell('{opt} -S -load {libvfctracer} -vfclibtracer {tracer_format} {tracer_bt} {tracer_level} {tracer_debug_mode} {verbose} {selectfunction} {blacklist} {ir} -o {ins}'.format(
                opt=opt,
                libvfctracer=libvfctracer,
                selectfunction=selectfunction,
                tracer_format=tracer_format,
                tracer_bt=tracer_bt,
                tracer_debug_mode=tracer_debug_mode,
                tracer_level=tracer_level,
                verbose=verbose,
                ir=ir,
                ins=ins_tracer,
                blacklist=blacklist,
            ))

            ir = ins_tracer            

        # Apply MCA instrumentation pass
        shell('{opt} -S -load {libvfcinstrument} -vfclibinst {verbose} {selectfunction} {blacklist} {ir} -o {ins}'.format(
            opt=opt,
            libvfcinstrument=libvfcinstrument,
            selectfunction=selectfunction,
            verbose=verbose,
            ir=ir,
            ins=ins_mca,
            blacklist=blacklist,
        ))

        ir = ins_mca

        ins = ir
        if not output:
            output = '-o ' + basename + '.o'
        # Produce object file
        shell('{clang} -c {output} {ins} {options}'.format(
            clang=clang,
            output=output,
            ins=ins,
            options=options))

if __name__ == "__main__":
    parser = NoPrefixParser(description='Compiles a program replacing floating point operation with calls to the mcalib (Montecarlo Arithmetic).')
    parser.add_argument('-c', action='store_true', help='only run preprocess, compile, and assemble steps')
    parser.add_argument('-o', metavar='file', help='write output to <file>')
    parser.add_argument('--function', metavar='function', help='only instrument <function>')
    parser.add_argument('--functions-file', metavar='file', help='only instrument functions in <functions-file>')
    parser.add_argument('-static', '--static', action='store_true', help='produce a static binary')
    parser.add_argument('--verbose', action='store_true', help='verbose output')
    parser.add_argument('--version', action='version', version=PACKAGE_STRING)
    parser.add_argument('--black-list-mode', action='store_true',
                        help='black list mode, not instrument functions present in <function> or <functions-file>')
    parser.add_argument('-report', '--report-level', action='store', type=str, default=0, choices=report_level_choices,
                        help='produces a report for floating-point operations')
    parser.add_argument('--print-percentage', action='store_true', help="print percentage of floating-points' type for report")
    parser.add_argument('--tracer', action='store_true', help="veritracer mode")
    parser.add_argument('--tracer-format', action='store', type=str, default='binary', choices=tracer_format_choices,
                        help='Output format for tracing values')
    parser.add_argument('--tracer-level', action='store', type=str, default='basic', choices=tracer_level_choices,
                        help='Tracing level')
    parser.add_argument('--tracer-backtrace', action='store_true',
                        help="veritracer backtrace mode")
    parser.add_argument('--tracer-debug-mode', action='store_true',
                        help="veritracer debug mode")
    
    args, other = parser.parse_known_args()
    
    sources, llvm_options = parse_extra_args(other)

    # check input files

    if len(sources) > 1 and args.o:
        fail('cannot specify -o when generating multiple output files')

    if args.function and args.functions_file:
        fail("Cannot used --function and --functions-file together")

    if args.report_level:        
        if not os.getenv('VERIFICARLO_REPORT_PATH'):
            os.environ['VERIFICARLO_REPORT_PATH'] = os.getenv("PWD")        
        add_header_verificarlo_report(args.report_level, args.print_percentage)

    if args.tracer:
        # Need to add debug option to get debug info 
        llvm_options += " -g "
        if not os.getenv('VERITRACER_LOCINFO_PATH'):
            os.environ['VERITRACER_LOCINFO_PATH'] = os.getenv("PWD") + os.sep

        if args.tracer_backtrace:
            llvm_options += " -rdynamic "
                
    output = "-o " + args.o if args.o else ""
    if args.c:
        if len(sources) == 0:
            fail('no input files')
        compiler_mode(sources, llvm_options, output, args)
    else:
        if len(sources) == 0 and len(llvm_options) == 0:
            fail('no input files')
        compiler_mode(sources, llvm_options, "", args)
        linker_mode(sources, llvm_options, output, args)
